name: workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use API_KEY_1
        run: echo ${{ secrets.GEO_IP_API }}

      - name: Use API_KEY_2
        run: echo ${{ secrets.GOOGLE_MAPS_API }}

          - name: Execute JavaScript and HTML
  run: <!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <title>IP Address Tracker</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300..900;1,300..900&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="app.css" />

  <style>
    .errorInvalidIp {
      border: 2px solid rgba(156,0,0,1);
      border-radius: 12px;
      margin-bottom: 0px;
      box-shadow: 0px 0px 13px 0px rgba(156,0,0,1);
    }
  </style>
</head>

<body>
  <h1>IP Address Tracker</h1>
  <form action="">
    <div class="searchBox">
      <input type="text" placeholder="Search for any IP address" />
      <button type="submit">
        <img src="images/icon-arrow.svg" alt="arrow icon for subbmit search" />
      </button>
    </div>
    <p id="invalidIpMsg">Invalid IP format!</p>
  </form>

  <section class="results">
    <div class="resultsDetails">
      <p class="resultType">IP Address</p>
      <p id="ipAddress">18.65.3.34</p>
    </div>
    <div class="resultsDetails">
      <p class="resultType">Location</p>
      <p id="locationResult">Seattle, <span id="country">United States</span></p>
    </div>
    <div class="resultsDetails">
      <p class="resultType">Timezone</p>
      <p id="utcResult">UTC -8</p>
    </div>
    <div class="resultsDetails">
      <p class="resultType">ISP</p>
      <p id="ispResult">Amazon Technologies Inc.</p>
    </div>
  </section>

  <div id="map"></div>

  <script>
    ((g) => {
      var h,
        a,
        k,
        p = "The Google Maps JavaScript API",
        c = "google",
        l = "importLibrary",
        q = "__ib__",
        m = document,
        b = window;
      b = b[c] || (b[c] = {});
      var d = b.maps || (b.maps = {}),
        r = new Set(),
        e = new URLSearchParams(),
        u = () =>
          h ||
          (h = new Promise(async (f, n) => {
            await (a = m.createElement("script"));
            e.set("libraries", [...r] + "");
            for (k in g)
              e.set(
                k.replace(/[A-Z]/g, (t) => "_" + t[0].toLowerCase()),
                g[k],
              );
            e.set("callback", c + ".maps." + q);
            a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
            d[q] = f;
            a.onerror = () => (h = n(Error(p + " could not load.")));
            a.nonce = m.querySelector("script[nonce]")?.nonce || "";
            m.head.append(a);
          }));
      d[l]
        ? console.warn(p + " only loads once. Ignoring:", g)
        : (d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)));
    })({ key: "`${{ secrets.GOOGLE_MAPS_API }}`", v: "weekly" });
  </script>
  <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="app.js"></script>
</body>

</html>


const button = document.querySelector("button");
const input = document.querySelector("input");
const form = document.querySelector("form");
const locationResult = document.getElementById("locationResult");
const ipResult = document.getElementById("ipAddress");
const utcResult = document.getElementById("utcResult");
const ispResult = document.getElementById("ispResult");
const mapElement = document.getElementById("map");
const country = document.getElementById("country");
const searchBox = document.querySelector(".searchBox");
const invalidIpMsg = document.getElementById("invalidIpMsg");


const getSome = async (ip) => {
  try {
    const res = await axios.get(
      `https://api.ipgeolocation.io/ipgeo?apiKey=`${{ secrets.GEO_IP_API }}`&ip=${ip}`
    );
    console.log(res);
    return res.data;
  } catch {
    console.log("nesto nevalja");
  }
};

let map;

async function initMap() {
  const position = { lat: 47.62232, lng: -122.33665 };

  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
  

  map = new Map(document.getElementById("map"), {
    zoom: 8,
    center: position,
    mapId: "DEMO_MAP_ID",
    fullscreenControl: false,
    streetViewControl: false,
  });

  const marker = new AdvancedMarkerElement({
    map: map,
    position: position,
  
  });

}

initMap();

let updateMap = async (lat, lng) => {
  const position = { lat: Number(lat), lng: Number(lng) };

  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
  

  map = new Map(document.getElementById("map"), {
    zoom: 8,
    center: position,
    mapId: "DEMO_MAP_ID",
    fullscreenControl: false,
    streetViewControl: false,
  });

  const marker = new AdvancedMarkerElement({
    map: map,
    position: position,
  
  });
 

}

const results = (res, ip) => {
  locationResult.innerText = res.city;
  country.innerText = res.country_name;
  ipResult.innerText = res.ip;
  utcResult.innerText = `UTC ${res.time_zone.offset}`;
  ispResult.innerText = res.isp;
  searchBox.classList.remove("errorInvalidIp");
  invalidIpMsg.style.display = "none";
  mapElement.style.display = 'block'
  if (ip.length > 25 && document.body.clientWidth < 563) {
    ipResult.style.fontSize = "11px";
  } else {
    ipResult.style.fontSize = "18px";
  }
};

const invalidIp = () => {
  locationResult.innerText = "--";
  country.innerText = "--";
  ipResult.innerText = "--";
  utcResult.innerText = "--";
  ispResult.innerText = "--";
  searchBox.classList.add("errorInvalidIp");
  invalidIpMsg.style.display = "block";
  mapElement.style.display = 'none'
  console.log("invalid ip");
};

form.addEventListener("submit", async (event) => {
  event.preventDefault();

  let ip = input.value;
  let ipRegexV4 = /^(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)(\.(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)){3}$/;
  let ipRegexV6 = /^([0-9a-fA-F]{1,4}:){7}([0-9a-fA-F]{1,4})$/;

  if (ipRegexV4.test(ip) || ipRegexV6.test(ip)) {
    console.log(`valid ip input: ${ip}`);
    try {
      const res = await getSome(ip);

      let lat = res.latitude;
      let lng = res.longitude;
      results(res, ip);
      updateMap(lat, lng);
    } catch(error) {
      console.log(error);
      console.log("something is wrong with promise");
    }
  } else {
    invalidIp();
  }
});
